exit
Group.update_all(user_id: 1)
@groups.count
@group.count
Group.pluck(:user_id)
Group.count
@groups
c
exit
c
arr
c
arr
c
result
c
result
arr
c
result
arr
c
result
resi=ult
arr
c
result
arr
c
arr
c
result
arr
c
result
arr
c
arr
c
arr
c
 arr = hepify(arr)
i + = 1
i = i + 1
result
arr
result[i] = arr.delete(arr[0])
arr
c
arr
exit
arr.empty?
arr
c
arr
c
index
ele
arr
c
arr[parent]
ele
parent
index
c
arr[1]
parent
ele
index
c
arr
ele
index
c
arr[parent]
parent
arr
arr[parent]
ele
index
exit
index
arr
c
index
ele
arr
ele
index
c
index
arr
ele
c
ele
arr
c
ele
arr
c
parent = (parent - 1)/2
parent
ele
arr
index
c
index
parent
arr
index
c
parent = (parent - 1)/2 
arr
index
c
arr
parent
c
parent
ele
c
index
arr
c
arr
parent
index
c
 end_index = ele > 0 ? index : index - 1
ele > 0
sum
ele
c
start_index
array
ele
c
index
c
start_index
index
c
array
ele
index
c
ele
index
c
index
c
array
a
index
c
index
sum
c
sum
c
index
sum
c
sum
c
sum
c
ele
sum
index
left_array
result_array
right_array
left_array
array
c
reload!
array
result_array
 right_array
!left_array.empty?
array.count > 1
 right_array.empty?
array.count > 1
exit
 result_array
 result_array.count 
result_array.count
result_array
   result_array
if left_array.empty? || right_array.empty?
   result_array
if left_array.empty? || right_array.empty?
c
array
c
array
c
array
c
array
c
array
c
array
c
result_array
c
result_array.push(merge_array(left_array, right_array))
right_array
left_array
c
result_array.push(merge_array(left_array, right_array))
right_array
left_array
right_array
left_array
reload!
right_array
left_array
c
result_array
left_array
c
result_array
c
[[5]].flatten
left_array.push(ele)
ele
 slice == count
ele
c
array
c
result_array
c
ele
c
result_array
c
result_array
c
result_array
c
result_array
c
result_array
c
result_array
c
result_array
c
result_array
right_array
left_array
divide(left_array)
